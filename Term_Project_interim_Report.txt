0. 주제 : Naver Shopping API와 Blog API를 이용한 웹 크롤링 및 제품 추천 서비스 제작

1. 프로젝트 목표 및 내용 : 본 프로젝트를 통해 제작하고자 하는 프로그램은 ‘사용 후기를 
통한 제품 추천 프로그램’이다.
사용자가 찾고 싶은 제품에 대한 키워드를 입력(ex. 게이밍 마우스)하면, 해당 키워드에 대한 후기를 Blog 게시물의 형태로 크롤링한다. (Naver Blog API 활용) 그 후 크롤링한 결과를 게시물의 제목과 해당 URL의 형태로 사용자에게 보여주며, 사용자는 제시된 후기 중 원하는 후기에 대한 블로그에 접속하여 제품의 후기를 읽어본다. 후기를 읽고 프로그램에 돌아오면 구체적인 제품명을 선택하게 된다. 사용자가 제품명을 선택하면, 해당 제품에 대한 이미지, 가격 등에 대한 정보를 보여주고, URL을 통해 직접 쇼핑 사이트와 연결되도록 한다. (Naver Shopping API 활용)
최종적으로, 위 방법으로 후기 -> 구체적인 제품의 기능 순으로 다양한 제품을 살펴본 사용자가 더욱 원활한 인터넷 쇼핑을 할 수 있도록 돕는 것이 본 프로젝트의 목표이다.

2. 주제 선정 이유 또는 프로젝트의 필요성 : 본 프로젝트를 기획하게 된 이유는 제품 구입까지 이르는 과정을 편하게 하고 객관적인 정보와 주관적인 후기를 함께 보여줌으로써 선택의 폭을 넓히기 위해서이다.

먼저, 사고자 하는 제품이 명확하게 정해지지 않은 경우를 생각해 보았다. 이 경우 일반적인 쇼핑 사이트에서의 쇼핑 순서를 따져보면, 사고자 하는 제품의 큰 카테고리 파악(ex. 게이밍 마우스 -> 마우스) > 구체적인 카테고리 파악(ex. 게이밍 마우스, 유무선 여부 등) > 검색 > 하나하나씩 제품 탐색 > 제품에 대한 기능적 정보 확인 > 후기 확인 > 구입 결정 순으로 진행되며, 특히 사고자 하는 제품이 무엇인지 정해지지 않았고 고민되는 상황이라면 정확한 카테고리로 제품을 탐색하고, 기능적인 측면에서 제품을 고르는 것이 쉽지 않기 때문에 이 순서로는 원활한 쇼핑을 진행하기 힘들다. 이 부분에서 본 프로젝트가 필요하다고 생각한다. 몇 가지 제품을 골랐지만 최종 선택에서 고민하는 경우, 본 프로그램을 통해 다른 사람들이 해당 제품을 어떻게 사용했는지에 대한 다양한 후기를 보면서 각 제품 간의 차이를 파악하고, 이를 제품을 직접 사용할 자신에게 적용하면서 선택에 도움을 줄 수 있을 것이라 생각한다. 또한, 제품에 대한 사전 정보가 없거나 부족한 사람의 경우에는 제품의 후기를 먼저 보게 됨으로써 간략한 정보를 얻을 수 있을 것이며, 얻은 정보를 토대로 제품을 원활하게 선택할 수 있으리라 생각한다.

또한, 일반적인 쇼핑 절차와 본 프로그램을 통한 절차의 차이에 따른 쇼핑 효율 증진에 대해 생각해 보았다. 일반적인 쇼핑의 경우에는 제품이 다양한 카테고리로 나누어져 있으며 정렬 또한 사용자의 편의에 따라 추천순, 별점순 등으로 나누어져 있다는 것이 장점이지만, 이는 어느 정도 사고자 하는 제품에 대한 윤곽이 잡혔거나, 제품에 대한 사전 정보가 많다는 것을 전제로 한다. 이 때문에 제품 선택 > 후기 확인 > 구입 결정의 시스템은 위의 경우로 보았을 때 상대적으로 선택의 폭이 좁은 편이다. 하지만 필자가 구현하고자 하는 프로그램의 쇼핑 시스템 (후기 확인 > 정보 습득 > 제품 선택 > 구입 결정)은 제품을 선택한 후 카테고리를 따르는 것이 아니기 때문에 선택의 폭을 넓힐 수 있다는 장점이 있을 것으로 예상된다.
결론적으로, 본 프로그램은 기존 쇼핑 시스템의 순서를 바꾸어 제품 선택의 폭을 넓히고 다양한 제품 탐색을 통해 원활한 쇼핑을 가능하게 해 줄 수 있다는 이유로 필요한 프로그램이라 생각한다.

3. 데이터 획득
 계획서에서는 Naver Shopping API, Blog API, 오타 변환 API를 이용하여 데이터를 획득한다고 적었기에, 이를 중심으로 작성하려 한다.

 1) 현재까지의 상황 : Naver Blog API를 이용하여 크롤링을 진행하였다. 사용자가 입력하게 될 ‘검색어’ 부분을 searchWord, 실제 url에 접속하여 데이터를 얻어낼 텍스트를 newSearchWord 변수로 지정하여 크롤링을 준비했다. 이후 Blog API에 Request를 보내 검색어에 대한 블로그 검색 결과를 Response 값으로 받았다. 그러나 막상 받은 Response에는 게시물 제목, url과 같이 필요한 정보뿐만이 아니라 본 페이지의 모든 내용이 들어있어 필요없는 정보까지 노출될 가능성이 있었다. 이에 정보 가공의 필요성을 느껴 본격적으로 필요한 정보만을 뽑아내는 과정을 진행했다. 게시글의 제목만 뽑아내는 과정과 해당 게시글의 url만 뽑아내는 과정으로 진행했으며, 이에 대한 내용은 4. 구현 내용에서 자세히 설명할 것이다.

 2) 앞으로의 데이터 획득 및 분석 계획 : 사용자가 입력한 단어를 토대로 Blog 검색 결과를 크롤링하는 과정까지 진행했으니, 이제부터는 Naver Shopping 사이트 결과와의 비교를 통해 쇼핑 사이트에 존재하는 제품만을 사용자에게 추천할 수 있도록 구현할 예정이다. 이를 위해 Naver Shopping API를 이용하여 Request & Response 과정을 진행할 것이며, url 연결을 통해 사용자가 선택한 제품을 쇼핑 사이트로 접속하여 볼 수 있도록 구현할 계획이다.

 또한, 오탈자로 인한 잘못된 데이터 획득을 방지하기 위해 오타 변환 과정도 진행할 계획이다. 이에 오타 변환 API를 이용할 것이며, 오탈자가 입력되었을 때 이를 표준어로 변환한 뒤 사용자로 하여금 오탈자를 변환할 것인지 물을 수 있도록 구현할 계획이다.

최종적으로, 지금까지 획득한 데이터와 앞으로 획득 및 분석할 데이터를 사용자가 보기 쉽게 UI로 데이터들을 보여주는 과정을 진행할 계획이다.

4. 구현 내용
 본 프로젝트를 위해 현재까지 총 3번의 코드 작성 과정을 진행했으며, 각 과정에 대한 설명을 작성한다.
 1) 첫 코드 작성 (05.10) : 기본적인 모듈 import, 데이터 획득 및 가공, UI 구성을 진행했다. 먼저, 파이썬 표준 모듈인 os 모듈과 sys 모듈을 import 함으로써 os 기본 기능과 파이썬 인터프리터의 기능들을 사용할 수 있도록 구성하였다. 또한, urllib.request 모듈을 import하면서 입력된 url에 대해 API에 request & response를 할 수 있도록 준비했으며, re 모듈을 import하여 정규표현식을 통한 데이터 가공 과정을 진행하도록 구성했다.

다음으로, 직접 데이터를 획득하는 코드를 작성했다. 사용자가 입력할 검색어를 searchWord, API에 요청할 검색어로 newSearchWord를 변수로 지정했다. (newSearchWord = searchWord + ‘후기’ - Blog API에 제품 후기에 대한 게시글만을 요청하기 위함)
newSearchWord를 API에 요청할 수 있는 코드값으로 변환하기 위해 urllib.parse.quote 메소드를 이용하여 encText 변수에 지정한 뒤, blog에 해당하는 url과 함께 API에 request하였다.
다음으로 response를 받기 위한 코드를 작성하였다.. 먼저 request에 대한 response를 urllib.request.urlopen 메소드로 지정한 뒤, getcode() 메소드를 이용하여 실제 코드값으로 변환하였다. 그러나 실제로 받은 response에는 필요한 값인 title과 link 외에도 많은 값들이 존재하였기에 데이터를 가공하는 과정을 거쳤다.
먼저, readlines() 메소드를 이용하여 response의 각 줄을 받아 리스트로 저장한 뒤, for문에 리스트를 값으로 지정하여 한 줄씩 읽어가며 데이터를 분석하도록 하였다. 이때 startswith 메소드를 이용하여 각 줄이 ‘title’로 시작하는 줄이라면 그 값만을 읽어들이도록 if문으로 구성한 뒤, utf-8 코드로 decode하는 과정과 byte – string 변환 과정을 거쳤다. 이후 정규표현식을 이용하여 따옴표 등 불필요한 값을 제거하여 사용자가 읽을 수 있는 형식으롤 변환하는 과정을 거쳤다. link 값도 같은 과정을 거쳐 사용자가 볼 수 있는 url 형태로 변환하였다.

코드를 작성하다 보니 데이터 획득 결과를 UI로 보면 좋을 것 같아 UI 프로그래밍도 같이 병행했다. tkinter 모듈을 import하여 UI 프로그래밍을 진행할 준비를 하였고, 사용자가 검색어를 입력할 검색 창, 검색 버튼, 크롤링 결과를 화면에 배치했다. 검색 창은 Entry, 검색 버튼은 Button, 크롤링 결과는 Label로 구성하여 화면에 배치했다.

 2) 두 번째 코드 작성 (05.22) : 전반적인 UI 개선을 위주로 코드를 작성했다. 기존 코드에서 검색 창, 버튼, 크롤링 결과 Label이 한 곳에 모여있었던 문제를 개선하기 위해 각 오브젝트에 grid 값을 줌으로써 행렬 형태로 배치하였다.
보편적인 검색 창들은 검색 버튼 외에도 Enter 키를 눌렀을 때에도 동작하기 마련이다. 하지만 기존 코드에서는 그러한 동작이 이뤄지지 않았기에 코드를 수정했다. 검색 창에 bind 메소드를 추가하여 Enter키, 즉 <Return> 값이 입력되었을 때에도 작동되도록 하였다.
크롤링 결과 중에서 link에 해당하는 부분을 클릭했을 때 해당 url로 접속할 수 있도록 하면 편의성 증대 측면에서 좋을 것 같아 코드를 수정헀다. 기존 Label로 구성되었던 link 결과를 Button으로 바꾸어 클릭 가능하도록 했으나, 실제 url 접속은 구현하지 못했다.

 3) 세 번째 코드 작성 (05.23) : 역시 UI 개선을 목표로 코드를 수정했다.
먼저, 기존 UI에서 블로그의 url이 직접적으로 노출되는 것이 보안 측면에서 문제가 될 것 같아 코드를 수정하는 작업을 거쳤다. 기존 link 결과에 주어졌던 Button 오브젝트를 없애고, title에 새로 Button을 부여한 뒤, title을 클릭하면 해당 url로 접속할 수 있도록 구현할 계획을 세웠다.
그러나, Button 클릭과 url 접속을 구현하는 과정에서 문제가 발생했다. 크롤링 결과로 총 9개의 블로그가 출력되었고 이를 모두 버튼으로 구현했는데, 아무리 다른 버튼을 눌러 봐도 접속되는 것은 마지막 url이었다. 이 문제는 현재 원인 분석 과정에 있으며, 아직 해결하지 못한 상태이다. 마지막으로, 폰트 변경, 글자 크기 변경을 통해 시각적 개선을 이루었다.

 4) 앞으로의 계획 : 먼저, 앞서 발생한 문제들을 개선하는 데 집중할 것이다. 이후 문제가 해결되면, Blog 결과 크롤링에 대한 코딩을 마치고 본격적으로 Shopping API와의 연계, 오타 변환 등에 대한 코드를 작성할 계획이다.
